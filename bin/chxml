#!/usr/bin/env python

# ensures that that there is a sites file specified and that it contains
# well-formed xml as well as essential attributes for the specified provider

import xml.parsers.expat,sys,os,commands,pprint
from glob import glob

class siteProps:

    def __init__(self,argstr):
        self.sites_file = ""
        self.startTags= []
        self.endTags=[]
        self.globusParams = 0
        self.execProvider = ""
        
        if len(argstr)<2:
            print "please specify a sites file"
            sys.exit()
        i = 0
        for o in argstr:
            if o == "'-sites.file'":
                self.sites_file = argstr[i+1].split("'")[1]
            elif o == "'-config'":
                config_file = open(argstr[i+1].split("'")[1],"r")
                for line in config_file.readlines():
                    if line.strip().startswith('#'):
                        continue
                    if line.find("sites.file")>-1:
                        self.sites_file = line.split("=")[1].strip()
            i = i+1                    
        if (self.sites_file == ""):
            swift_loc = commands.getoutput("which swift")
            swift_home = swift_loc.split("bin")[0]
            self.sites_file = swift_home+"etc/sites.xml"
            print "no sites file specified, setting to default: "+self.sites_file


    def parsefile(self):
        parser = xml.parsers.expat.ParserCreate()
        parser.ParseFile(open(self.sites_file, "r"))

    def start_element(self, name, attrs):
        self.startTags.append(name)
        for x, y in attrs.iteritems():
            if (name=="execution" and x=="provider"):
                self.execProvider = y
            if (y=="globus"):
                self.globusParams = 1
	    if (mysite.globusParams == 1 and mysite.execProvider == "local"):
    		pp = pprint.PrettyPrinter()
    		print "Warning: "+mysite.sites_file+" contains globus parameters that do not apply to the local execution provider ("+name+" "+pp.pformat(attrs)+")"
		sys.exit()
    def end_element(self, name):
        self.endTags.append(name)

        
#------------------------main----------------------------------

mysite = siteProps(sys.argv)
try:
    mysite.parsefile()
except Exception, e:
    print "Error: XML parsing error in "+mysite.sites_file
    print "%s is %s" % (mysite.sites_file, e)
    sys.exit()

p = xml.parsers.expat.ParserCreate()
p.StartElementHandler = mysite.start_element
p.EndElementHandler = mysite.end_element
p.ParseFile(open(mysite.sites_file,"r"))

config = 0
pool = 0

for tag in mysite.startTags:
    if tag=="config":
        config = 1
    else:
        if tag=="pool":
            pool= 1

if (pool<1):
    print "Warning: Your sites file, "+mysite.sites_file+" is missing a pool entry"
    sys.exit()
if (config<1):
    print "Warning: Your site file, "+mysite.sites_file+" is missing a config entry"
    sys.exit()
    
