Futuregrid Quickstart Guide
---------------------------
FutureGrid is a distributed, high-performance test-bed that allows 
scientists to collaboratively develop and test innovative approaches 
to parallel, grid, and cloud computing.

More information on futuregrid can be found at https://portal.futuregrid.org/.

Requesting Futuregrid Access
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
If you do not already have a futuregrid account, you can follow the
instructions at https://portal.futuregrid.org/gettingstarted to get started.
This page provides information on how to create an account, how to join
a project, how to set up your SSH keys, and how to create a new project.

Downloading Swift VM Tools
~~~~~~~~~~~~~~~~~~~~~~~~~~
A set of scripts based around cloudinitd are used to easily start virtual
machines. To download, change to your home directory and run the 
following command:

-----
$ svn co https://svn.ci.uchicago.edu/svn/vdl2/usertools/swift-vm-boot swift-vm-boot
-----

Download your Credentials
~~~~~~~~~~~~~~~~~~~~~~~~~
Run the following commands to retrieve your credentials:
-----
$ cd swift-vm-boot
$ scp yourusername@hotel.futuregrid.org:nimbus_creds.tar.gz .
$ tar xvfz nimbus_creds.tar.gz
-----
When you extract your credential file, look at the file called
hotel.conf. Near the bottom of this file will be two settings
called vws.repository.s3id and vws.repository.s3key. Copy these
values for the next step.

Configuring coaster-service.conf
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To run on futuregrid, you will need a file called coaster-service.conf. 
This file contains many options to control how things run. Here is
an example of a working coaster-service.conf on futuregrid. 

-----
# Where to copy worker.pl on the remote machine for sites.xml
export WORKER_LOCATION=/tmp

# How to launch workers: local, ssh, cobalt, or futuregrid
export WORKER_MODE=futuregrid

# Do all the worker nodes you're using have a shared filesystem? (yes/no)
export SHARED_FILESYSTEM=no

# Username to use on worker nodes
export WORKER_USERNAME=root

# Enable SSH tunneling? (yes/no)
export SSH_TUNNELING=yes

# Directory to keep log files, relative to working directory when launching start-coaster-service
export LOG_DIR=logs

# Location of the swift-vm-boot scripts
export SWIFTVMBOOT_DIR=$HOME/swift-vm-boot

# Futuregrid settings
export FUTUREGRID_IAAS_ACCESS_KEY=XXXXXXXXXXXXXXXXXXXXX
export FUTUREGRID_IAAS_SECRET_KEY=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
export FUTUREGRID_HOTEL_NODES=0
export FUTUREGRID_SIERRA_NODES=2
export FUTUREGRID_CPUS_PER_NODE=1

# Swift information for creating sites.xml
export WORK=/tmp
export JOBS_PER_NODE=$FUTUREGRID_CPUS_PER_NODE
export JOB_THROTTLE=$( echo "scale=5; ($JOBS_PER_NODE * $(($FUTUREGRID_HOTEL_NODES + $FUTUREGRID_SIERRA_NODES)))/100 - 0.00001"|bc )

# Application locations for tc.data
#app convert=/usr/bin/convert
-----

Paste your credentials from the hotel.conf file into the FUTUREGRID_IAAS_ACCESS_KEY and FUTUREGRID_IAAS_SECRET_KEY fields.
Adjust the number of nodes you would like to allocate here by changing the values of FUTUREGRID_HOTEL_NODES and FUTUREGRID_SIERRA_NODES.
Add a list of any applications you want to run in the format "#app myapp=/path/to/app".

Starting the Coaster Service Script
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Now that everything is configured, change to the location of the coaster-service.conf file
and run this command to start the coaster service:

-----
$ start-coaster-service
-----

This command will start the VMs, start the required processes on the worker nodes,
and generate Swift configuration files for you to use. The configuration files
will be generated in your current directory. These files are sites.xml, tc.data, 
and cf.

Running Swift
~~~~~~~~~~~~~
Now that you have all of your configuration files generated, run the following command:

-----
$ swift -sites.file sites.xml -tc.file tc.data -config cf <yourscript.swift>
-----

If you would like to create a custom tc file for repeated use, rename it to something other
than tc.data to prevent it from being overwritten. The sites.xml however will need to be
regenerated every time you start the coaster service. If you need to repeatedly modify some 
sites.xml options, you may edit the template in Swift's etc/sites/persistent-coasters. You
may also create your own custom tc files with the hostname of persistent-coasters. More
information about this can be found in the Swift userguide at 
http://www.ci.uchicago.edu/swift/guides/trunk/userguide/userguide.html.

Stopping the Coaster Service Script
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To stop the coaster service, run the following command:
-----
$ stop-coaster-service
-----

This will kill the coaster service, kill the worker scripts on remote systems and terminate
the virtual machines that were created during start-coaster-service.

More Help
~~~~~~~~~
The best place for additional help is the Swift user mailing list. You can subscribe to this list at
http://mail.ci.uchicago.edu/mailman/listinfo/swift-user. When submitting information, please send 
your sites.xml file, your tc.data, and any error messages you run into.

