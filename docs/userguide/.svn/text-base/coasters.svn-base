Coasters
--------
In many applications, Swift performance can be greatly enhanced by the
use of CoG coasters. CoG coasters provide a low-overhead job submission
and file transfer mechanism suited for the execution of short jobs (on
the order of a few seconds) and the transfer of small files (on the
order of a few kilobytes) for which other grid protocols such as GRAM
and GridFTP are poorly suited.

The coaster mechanism submits a head job using some other execution
mechanism such as GRAM, and for each worker node that will be used in a
remote cluster, it submits a worker job, again using some other
execution mechanism such as GRAM. Details on the design of the coaster
mechanism can be found here. <http://wiki.cogkit.org/wiki/Coasters>

The head job manages file transfers and the dispatch of execution jobs
to workers. Much of the overhead associated with other grid protocols
(such as authentication and authorization, and allocation of worker
nodes by the site's local resource manager) is reduced, because that
overhead is associated with the allocation of a coaster head or coaster
worker, rather than with every Swift-level procedure invocation;
potentially hundreds or thousands of Swift-level procedure invocations
can be run through a single worker.

Coasters can be configured for use in two situations: job execution and
file transfer.

To use for job execution, specify a sites.xml execution element like this:

----
<execution provider="coaster" jobmanager="gt2:gt2:pbs" url="grid.myhost.org">
----

The jobmanager string contains more detail than with other providers. It
contains either two or three colon separated fields: 1:the provider to
be use to execute the coaster head job - this provider will submit from
the Swift client side environment. Commonly this will be one of the GRAM
providers; 2: the provider to be used to execute coaster worker jobs.
This provider will be used to submit from the coaster head job
environment, so a local scheduler provider can sometimes be used instead
of GRAM. 3: optionally, the jobmanager to be used when submitting worker
job using the provider specified in field 2.

To use for file transfer, specify a sites.xml filesystem element like this:

----
<filesystem provider="coaster" url="gt2://grid.myhost.org" />
----
The url parameter should be a pseudo-URI formed with the URI scheme
being the name of the provider to use to submit the coaster head job,
and the hostname portion being the hostname to be used to execute the
coaster head job. Note that this provider and hostname will be used for
execution of a coaster head job, not for file transfer; so for example,
a GRAM endpoint should be specified here rather than a GridFTP endpoint.

Coasters are affected by the following profile settings, which are
documented in the Globus namespace profile section:

[options="header, autowidth"]
|=================
|Profile key|Brief description
|slots|How many maximum LRM jobs/worker blocks are allowed
|workersPerNode|How many coaster workers to run per execution node
|nodeGranularity|Each worker block uses a number of nodes that is a
multiple of this number
|lowOverallocation|How many times larger than the job walltime should a
block's walltime be if all jobs are 1s long
|highOverallocation|How many times larger than the job walltime should a
block's walltime be if all jobs are infinitely long
|overallocationDecayFactor|How quickly should the overallocation curve
tend towards the highOverallocation as job walltimes get larger
|spread|By how much should worker blocks vary in worker size
|workersPerNode|How many coaster workers to run per execution node
|reserve|How many seconds to reserve in a block's walltime for
starting/shutdown operations
|maxnodes|The maximum number of nodes allowed in a block
|maxtime|The maximum number of walltime allowed for a block
|remoteMonitorEnabled|If true, show a graphical display of the status of
the coaster service
|==================
