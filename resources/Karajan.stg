group Karajan;

// TODO can move progress ticker start into vdl:mains so karajan files
// are smaller

program(types,procedures,declarations,statements,constants,buildversion) ::= <<
<project><!-- CACHE ID $buildversion$ -->
  <import file="sys.xml"/>
  <import file="scheduler.xml"/>
  <import file="rlog.xml"/>
  <import file="vdl.k"/>
  $if(types)$
  <types>
     <xs:schema targetNamespace="http://ci.uchicago.edu/swift/2009/02/swiftscript" xmlns="http://ci.uchicago.edu/swift/2009/02/swiftscript" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema">
     $types;separator="\n"$  
     </xs:schema>	 
  </types>
  $endif$
  $constants;separator="\n"$
  $procedures;separator="\n"$
  $declarations;separator="\n"$
  $if(statements)$
  <restartLog>
  	<vdl:mains>
		<vdl:startprogressticker />
		<vdl:mainp>
		    $parallel(statements=statements)$
		</vdl:mainp>
		<vdl:stopprogressticker />
	</vdl:mains>
  </restartLog>  
  $endif$
</project>
>>

typeDef(name,type,members,sourcelocation) ::= <<
 $if(type)$
   	 <xs:element name="$name$" type="$type$"/>      
 $else$
   $if(!members)$
 	   <xs:simpleType name="$name$">
 	   <xs:restriction base="string"/>
 	   </xs:simpleType>
   $else$
 	   <xs:complexType name="$name$">
 	   <xs:sequence>
 	     $members;separator="\n"$
 	   </xs:sequence>
 	   </xs:complexType>
   $endif$
 $endif$
>>
 	
memberdefinition(type,name,sourcelocation) ::= <<
   <xs:element name="$name$" type="$type$"/>
>>

procedure(name,outputs,inputs,arguments,optargs,binding,declarations,statements,config,line) ::= <<
<element name="$name$"$if(arguments)$ arguments="$proc_args(args=arguments)$"$endif$$if(optargs)$ optargs="$proc_args(args=optargs)$"$endif$>
  $optargs:default_arg();separator="\n"$
  $inputs:vdl_log_input();separator="\n"$
  $outputs:vdl_log_output();separator="\n"$
$if(binding)$
  $vdl_execute(outputs=outputs,inputs=inputs,application=binding.application, name=name,line=line)$
$else$
  $compound(outputs=outputs,inputs=inputs,declarations=declarations,statements=statements,name=name)$
$endif$
</element>

>>

compound(outputs,inputs,declarations,statements,config,name) ::= <<
<log level="info"><string>STARTCOMPOUND thread={#thread} name=$name$</string></log>
$declarations;separator="\n"$
$if(statements)$
$parallel(statements=statements)$
$endif$
$outputs:vdl_closedataset();separator="\n"$
<log level="info"><string>ENDCOMPOUND thread={#thread}</string></log>
>>

proc_args(args) ::= <<
$args:arg_name();separator=","$
>>

arg_name() ::= <<
$it.name$
>>

default_arg() ::= <<
$if(it.default)$
<default name="$it.name$">
$it.default$
</default>
$endif$
>>

vdl_execute(outputs,inputs,application,name,line) ::= <<
<log level="debug" message="PROCEDURE line=$line$ thread={#thread} name=$name$"/>
<vdl:execute>
  <vdl:tr>$application.exec$</vdl:tr>
  $inputs:vdl_stagein();separator="\n"$
  $outputs:vdl_stageout();separator="\n"$
  $vdl_arguments(arguments=application.arguments, stdin=application.stdin,stdout=application.stdout,stderr=application.stderr)$
</vdl:execute>
$outputs:vdl_closedataset();separator="\n"$
<log level="debug" message="PROCEDURE_END line=$line$"/>
>>

vdl_log_input() ::= <<
<parameterlog>
<string>input</string>
<string>$it.name$</string>
<vdl:getdatasetprovenanceid var="{$it.name$}" />
<string>{#thread}</string>
</parameterlog>
>>

vdl_log_output() ::= <<
<parameterlog>
<string>output</string>
<string>$it.name$</string>
<vdl:getdatasetprovenanceid var="{$it.name$}" />
<string>{#thread}</string>
</parameterlog>
>>

vdl_stagein() ::= <<
<vdl:stagein var="{$it.name$}"/>
>>

vdl_stageout(outputs) ::= <<
<vdl:stageout var="{$it.name$}"/>
>>

vdl_closedataset() ::= <<
<vdl:closedataset var="{$it.name$}"/>
>>

vdl_arguments(arguments,stdin,stdout,stderr) ::= <<
<vdl:arguments>
  $arguments;separator="\n"$
</vdl:arguments>
$if (stdin)$
<vdl:stdin>
  $stdin$
</vdl:stdin>
$endif$
$if (stdout)$
<vdl:stdout>
  $stdout$
</vdl:stdout>
$endif$
$if (stderr)$
<vdl:stderr>
  $stderr$
</vdl:stderr>
$endif$
>>

parallel(statements) ::= <<
$if(rest(statements))$
<parallel>
  $statements;separator="\n"$
</parallel>
$else$
<sequentialWithID>
  $statements$
</sequentialWithID>
$endif$
>>

// the 'function' template outputs a karajan code fragment
// that calls a function in the 'swiftscript' namespace.

function(name, args, datatype) ::= <<
<swiftscript:$name$>
  $if(args)$ $args$ $endif$
</swiftscript:$name$>
>>

iterate(declarations,statements,cond,var) ::= <<

<vdl:infinitecountingwhile>
  <set names="\$\$">
    <each items="{\$}"/>
  </set>
  <set name="$var$">
    <vdl:new type="int" value="{\$\$}" />
  </set>
  $sub_comp(declarations=declarations, statements=statements)$
  <sys:if>
    <vdl:getfieldvalue>$cond$</vdl:getfieldvalue>
    <sys:break/>
  </sys:if>
  
</vdl:infinitecountingwhile>
>>

foreach(var,in,indexVar,declarations,statements,line,selfClose) ::= <<
<vdl:tparallelFor name="\$"$if(selfClose)$ selfClose="$selfClose$"$endif$>
  <getarrayiterator>$in$</getarrayiterator>
  <set names="\$\$, $var$">
    <each items="{\$}"/>
  </set>
$if(indexVar)$
    <set name="$indexVar$">
      <vdl:new type="int" value="{\$\$}"/>
    </set>
$endif$
	<log level="debug" message="FOREACH_IT_START line=$line$ thread={#thread}"/>
<log level="debug"><string>SCOPE thread={#thread}</string></log>

    $declarations;separator="\n"$
    $if(statements)$
      $parallel(statements=statements)$
    $endif$
    <log level="debug" message="FOREACH_IT_END line=$line$ thread={#thread}"/>
</vdl:tparallelFor>
>>

// need to log inputs and outputs at the calling stage here because
// they are not 
// $outputs:vdl_log_output();separator="\n"$

callInternal(func, outputs, inputs) ::= <<
<sequential>
<log level="debug" message="INTERNALPROC_START thread={#thread} name=$func$"/>
<set name="swift#cs"><variable>#thread</variable></set>
<$func$>
  <parallel>
    $outputs:callInternal_log_output();separator="\n"$
    $inputs:callInternal_log_input();separator="\n"$
  </parallel>
</$func$>
<log level="debug" message="INTERNALPROC_END thread={#thread}"/>
</sequential>
>>

callInternal_log_input() ::= <<
<sequential>
  <set name="swift#callInternalValue">$it$</set>
  <parameterlog>
    <string>input</string>
    <string>TODO_name_or_pos</string>
    <vdl:getdatasetprovenanceid var="{swift#callInternalValue}" />
    <string>{swift#cs}</string>
  </parameterlog>
  <variable>swift#callInternalValue</variable>
</sequential>
>>

callInternal_log_output() ::= <<
<sequential>
  <set name="swift#callInternalValue">$it$</set>
  <parameterlog>
    <string>output</string>
    <string>TODO_name_or_pos</string>
    <vdl:getdatasetprovenanceid var="{swift#callInternalValue}" />
    <string>{swift#cs}</string>
  </parameterlog>
  <variable>swift#callInternalValue</variable>
</sequential>
>>

callUserDefined(func, outputs, inputs) ::= <<
<$func$>
  <parallel>
    $outputs;separator="\n"$
    $inputs;separator="\n"$
  </parallel>
</$func$>
>>

call_arg(bind, expr, datatype) ::= <<
$if(bind)$
<argument name="$bind$">
  $expr$
</argument>
$else$
$expr$
$endif$
>>

globalConstant(name, expr, datatype) ::= <<
<global name="$name$">
  $expr$
</global>
>>

variable(name,type,expr,mapping,nil,file,waitfor,datatype,isGlobal) ::= <<
$if(isGlobal)$<global name="$name$">$else$<set name="$name$">$endif$
  $if(mapping)$
  <vdl:new type="$type$" dbgname="$name$"$if(waitfor)$ waitfor="$waitfor;separator=" "$"$endif$>
    $vdl_mapping(mapping=mapping,file=file,waitfor=waitfor)$
  </vdl:new>
  $else$
    $if(file)$
      <vdl:new type="$type$" dbgname="$name$"$if(waitfor)$ waitfor="$waitfor;separator=" "$"$endif$>
        $vdl_mapping(mapping=mapping,file=file,waitfor=waitfor)$
      </vdl:new>
    $else$
      <vdl:new type="$type$" dbgname="$name$"$if(waitfor)$ waitfor="$waitfor;separator=" "$"$endif$ />
    $endif$
  $endif$
$if(isGlobal)$</global>$else$</set>$endif$
<parameterlog>
<string>intermediate</string>
<string>$name$</string>
<vdl:getdatasetprovenanceid var="{$name$}" />
<string>{#thread}</string>
</parameterlog>
>>

vdl_mapping(mapping,file,waitfor) ::= <<
$if(file)$
<vdl:mapping descriptor="single_file_mapper">
  <vdl:parameter name="file" value="$file.name$"/>
  $if(file.params)$$file.params;separator="\n"$$endif$
  $if(!waitfor)$
  <vdl:parameter name="input" value="true" />
  $endif$
</vdl:mapping>
$else$
<vdl:mapping descriptor="$mapping.descriptor$">
  $mapping.params;separator="\n"$
  $if(!waitfor)$
  <vdl:parameter name="input" value="true" />
  $endif$
</vdl:mapping>
$endif$
>>

vdl_parameter(name,expr) ::= <<
<vdl:parameter name="$name$">$expr$</vdl:parameter>
>>

assign(var,value) ::= <<
   <vdl:setfieldvalue>
     <argument name="var">
       $var$
     </argument>
     <argument name="value">
       $value$
     </argument>
   </vdl:setfieldvalue>
>>

callexpr(call, datatype, callID, prefix) ::= <<
<sequential>
	<set name="swift#callintermediate">
		<vdl:new type="$datatype$" dbgname="swift#callintermediate">
			<vdl:mapping descriptor="concurrent_mapper">
				<vdl:parameter name="prefix">_callintermediate-$prefix$</vdl:parameter>
			</vdl:mapping>
		</vdl:new>
	</set>
	$call$
	<variable>swift#callintermediate</variable>
</sequential>
>>

array(elements, datatype) ::= <<
<vdl:createarray>
  <list>
    $elements;separator="\n"$
  </list>
</vdl:createarray>
>>

range(from,to,step,datatype) ::= <<
<sequential>
 <set name="swift#from">$from$</set>
 <set name="swift#to">$to$</set>
 $if(step)$
 <set name="swift#step">$step$</set>
 $endif$
 <set name="swift#rangeout">
  <vdl:range>
    <argument name="from"><variable>swift#from</variable></argument>
    <argument name="to"><variable>swift#to</variable></argument>
    $if(step)$
    <argument name="step"><variable>swift#step</variable></argument>
    $endif$
  </vdl:range>
 </set>
 <if><equals><vdl:configProperty><string>provenance.log</string></vdl:configProperty><string>true</string></equals>
 <then>
 <log level="info"><concat>
    <string>ARRAYRANGE thread={#thread} array=</string>
    <vdl:getdatasetprovenanceid var="{swift#rangeout}" />
    <string> from=</string> <vdl:getdatasetprovenanceid var="{swift#from}" />
    <string> to=</string> <vdl:getdatasetprovenanceid var="{swift#to}" />
    $if(step)$
    <string> step=</string> <vdl:getdatasetprovenanceid var="{swift#step}" />
    $else$
    <string> step=none</string>
    $endif$
 </concat></log>
 </then>
 </if>
 <variable>swift#rangeout</variable>
</sequential>
>>

if(condition,vthen,velse) ::= <<
<if>
  <vdl:getfieldvalue>$condition$</vdl:getfieldvalue>
  <then>
<log level="debug"><string>SCOPE thread={#thread}</string></log>
    $vthen$
  </then>
  $if(velse)$
  <else>
<log level="debug"><string>SCOPE thread={#thread}</string></log>
    $velse$
  </else>
  $endif$
</if>
>>

sub_comp(declarations,statements) ::= <<
$declarations;separator="\n"$
$if(statements)$
$parallel(statements=statements)$
$endif$
>>

switch(condition,cases,sdefault) ::= <<
<sequential>
  <set name="\$_sw">
    $condition$
  </set>
  <if>
$cases:{case |
    <vdl:getfieldvalue>
    <vdlop:eq>
       <variable>\$_sw</variable>
       $case.value$
    </vdlop:eq>
    </vdl:getfieldvalue>
    <then>
      $sub_comp(declarations=case.declarations, statements=case.statements)$
    </then>
}$
$if(sdefault)$
    <else>
      $sdefault$
    </else>

$endif$
  </if>
</sequential>
>>

// TODO can optimise this like we do with parallel statements so that
// the wrapping layer disappers in the (perhaps common?) case of a
// single layer.
sequential(statements) ::= <<
  <sequential>
    $statements;separator="\n"$
  </sequential>
>>


partialclose(var, closeID) ::= <<
  <partialCloseDataset var="{$var$}" closeID="$closeID$" />
>>



operator ::= [
  "+":"vdlop:sum",
  "-":"vdlop:subtraction",
  "*":"vdlop:product",
  "/":"vdlop:fquotient",
  "%/":"vdlop:iquotient",
  "%%":"vdlop:remainder",
  "&lt;=":"vdlop:le",
  "&gt;=":"vdlop:ge",
  "&gt;":"vdlop:gt",
  "&lt;":"vdlop:lt",
  "<=":"vdlop:le",
  ">=":"vdlop:ge",
  ">":"vdlop:gt",
  "<":"vdlop:lt",
  "==":"vdlop:eq",
  "!=":"vdlop:ne",
  "&amp;&amp;":"vdlop:and",
  "||":"vdlop:or"
]

unaryNegation(exp, datatype) ::= <<
<vdlop:product>
  <vdl:new type="int" value="-1" />
  $exp$
</vdlop:product>
>>

binaryop(op,left,right,datatype) ::= <<
<$operator.(op)$>
  $left$
  $right$
</$operator.(op)$>
>>

not(exp, datatype) ::= <<
<vdlop:not>
  $exp$
</vdlop:not>
>>

id(var, datatype) ::= <<
<variable>$var$</variable>
>>

extractarrayelement(parent, arraychild, datatype) ::= <<
<vdl:getfieldsubscript>
  <argument name="var">$parent$</argument>
  <argument name="subscript">$arraychild$</argument>
</vdl:getfieldsubscript>
>>

extractstructelement(parent, memberchild, datatype) ::= <<
<getfield>
  <argument name="var">$parent$</argument>
  <argument name="path">$memberchild$</argument>
</getfield>
>>

slicearray(parent, memberchild, datatype) ::= <<
<sequential>
 <set name="swift#array">$parent$</set> 
 <set name="swift#slice">
  <vdl:slicearray>
    <argument name="var"><variable>swift#array</variable></argument>
    <argument name="path">$memberchild$</argument>
    <argument name="type">$datatype$</argument>
  </vdl:slicearray>
 </set>

 <log level="debug"><concat>
   <string>SLICEARRAY thread={#thread} slice=</string>
   <vdl:getdatasetprovenanceid var="{swift#slice}" />
   <string> member=$memberchild$ array=</string>
   <vdl:getdatasetprovenanceid var="{swift#array}" />
 </concat></log>

 <variable>swift#slice</variable>
</sequential>
>>


iConst(value, datatype) ::= <<
<vdl:new type="int" value="$value$" />
>>

fConst(value, datatype) ::= <<
<vdl:new type="float" value="$value$" />
>>

bConst(value, datatype) ::= <<
<vdl:new type="boolean" value="$value$" />
>>

sConst(value,innervalue,datatype) ::= <<
<vdl:new type="string" value="$innervalue$" />
>>

